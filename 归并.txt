实现归并算法的思路
背景：
逆向思维的产物。
对于两个相同长度（n/2）的顺序数列只需从头开始上下比较就可以（最多n-1）

问题是如何从非顺序的全列中获取顺序的子列
引入递归的方法
设数列为2^n 则不断二分下去得到底层的两组二元组，则可以通过一次比较得到两个二元顺序列
这两个二元组可以进行归并排序，并逐级向上传播得到最后的顺序列
方案一是不考虑形参实参共变的情况：
逐级递归至最后的二元形式，经一次比较得到最底层的顺序列，返回结果到上一层
方案二是考虑形参实参共变：
用索引的变化来实现结果的反馈
先对下一级进行处理
在处理本级

递归的关键是要找到停止条件
带返回的停条是找到极限条件比如数列长度，并返回极限值，且停止递归调用
不带返回的停条是找到停止递归的条件，转而执行特殊调用
注意到递归是天然阻塞的
